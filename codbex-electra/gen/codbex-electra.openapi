openapi: 3.0.3
info:
  title: Electra - OpenAPI 3.0
  version: 1.0.0
  description: Warehouse Management Application
externalDocs:
  description: Find out more about Eclipse Dirigible
  url: https://dirigible.io
servers:
  - url: /services/ts
tags:
  - name: currencies
  - name: sales-orders
  - name: stores
  - name: customers
  - name: countries
  - name: country-statuses
  - name: zones
  - name: zone-statuses
  - name: order-statuses
  - name: languages
  - name: language-statuses
  - name: customer-statuses
  - name: sales-orders
  - name: products
  - name: stock-statuses
  - name: manufacturers
  - name: product-statuses
  - name: employees
  - name: employee-statuses
  - name: sales-orders
  - name: sales-orders
  - name: currency-statuses
  - name: groups
  - name: product-attributes
  - name: products
  - name: attribute-groups
  - name: sales-orders
  - name: product-attributes
  - name: products
  - name: permissions
  - name: group-employees
  - name: group-permissions
  - name: entity-references
  - name: stores
  - name: store-configurations
  - name: store-types
  - name: products
  - name: attribute-groups
  - name: product-categories
  - name: products
  - name: product-categories
paths:
  /codbex-electra/gen/api/currencies/CurrencyService.ts:
    get:
      summary: List Currency
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - currencies
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Currency'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Currency
      tags:
        - currencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/currencies/CurrencyService.ts/{id}:
    get:
      summary: Get Currency by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - currencies
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Currency'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Currency by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - currencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Currency by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - currencies
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/currencies/CurrencyService.ts/count:
    get:
      summary: Count the number of Currency
      tags:
        - currencies
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Currency by CurrencyFilterOptions
      tags:
        - currencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Title: "abcd"
                      Code: "abcd"
                      SymbolLeft: "abcd"
                      SymbolRight: "abcd"
                      DecimalPlace: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Title: "abcd"
                      Code: "abcd"
                      SymbolLeft: "abcd"
                      SymbolRight: "abcd"
                      DecimalPlace: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/currencies/CurrencyService.ts/search:
    post:
      summary: Search Currency by CurrencyFilterOptions
      tags:
        - currencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Title: "abcd"
                      Code: "abcd"
                      SymbolLeft: "abcd"
                      SymbolRight: "abcd"
                      DecimalPlace: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Title: "abcd"
                      Code: "abcd"
                      SymbolLeft: "abcd"
                      SymbolRight: "abcd"
                      DecimalPlace: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Currency'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderService.ts:
    get:
      summary: List SalesOrder
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrder'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrder
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrder'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrder'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderService.ts/{id}:
    get:
      summary: Get SalesOrder by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrder'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrder by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrder'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrder'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrder by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderService.ts/count:
    get:
      summary: Count the number of SalesOrder
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrder by SalesOrderFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Number: "abcd"
                      UpdatedBy: "abcd"
                      Tracking: "abcd"
                      Comment: "abcd"
                      InvoicePrefix: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Number: "abcd"
                      UpdatedBy: "abcd"
                      Tracking: "abcd"
                      Comment: "abcd"
                      InvoicePrefix: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderService.ts/search:
    post:
      summary: Search SalesOrder by SalesOrderFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Number: "abcd"
                      UpdatedBy: "abcd"
                      Tracking: "abcd"
                      Comment: "abcd"
                      InvoicePrefix: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Number: "abcd"
                      UpdatedBy: "abcd"
                      Tracking: "abcd"
                      Comment: "abcd"
                      InvoicePrefix: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrder'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreService.ts:
    get:
      summary: List Store
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - stores
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Store'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Store
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreService.ts/{id}:
    get:
      summary: Get Store by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stores
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Store'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Store by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Store by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stores
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreService.ts/count:
    get:
      summary: Count the number of Store
      tags:
        - stores
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Store by StoreFilterOptions
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Url: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Url: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreService.ts/search:
    post:
      summary: Search Store by StoreFilterOptions
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Url: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Url: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Store'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customers/CustomerService.ts:
    get:
      summary: List Customer
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - customers
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Customer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Customer
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customers/CustomerService.ts/{id}:
    get:
      summary: Get Customer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - customers
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Customer'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Customer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Customer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - customers
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customers/CustomerService.ts/count:
    get:
      summary: Count the number of Customer
      tags:
        - customers
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Customer by CustomerFilterOptions
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Email: "abcd"
                      FirstName: "abcd"
                      LastName: "abcd"
                      Telephone: "abcd"
                      CustomField: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Email: "abcd"
                      FirstName: "abcd"
                      LastName: "abcd"
                      Telephone: "abcd"
                      CustomField: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customers/CustomerService.ts/search:
    post:
      summary: Search Customer by CustomerFilterOptions
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Email: "abcd"
                      FirstName: "abcd"
                      LastName: "abcd"
                      Telephone: "abcd"
                      CustomField: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Email: "abcd"
                      FirstName: "abcd"
                      LastName: "abcd"
                      Telephone: "abcd"
                      CustomField: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Customer'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/countries/CountryService.ts:
    get:
      summary: List Country
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - countries
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Country'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Country
      tags:
        - countries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/countries/CountryService.ts/{id}:
    get:
      summary: Get Country by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - countries
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Country'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Country by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - countries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Country by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - countries
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/countries/CountryService.ts/count:
    get:
      summary: Count the number of Country
      tags:
        - countries
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Country by CountryFilterOptions
      tags:
        - countries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      IsoCode2: "abcd"
                      IsoCode3: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      IsoCode2: "abcd"
                      IsoCode3: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/countries/CountryService.ts/search:
    post:
      summary: Search Country by CountryFilterOptions
      tags:
        - countries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      IsoCode2: "abcd"
                      IsoCode3: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      IsoCode2: "abcd"
                      IsoCode3: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Country'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/country-statuses/CountryStatusService.ts:
    get:
      summary: List CountryStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - country-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CountryStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create CountryStatus
      tags:
        - country-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/country-statuses/CountryStatusService.ts/{id}:
    get:
      summary: Get CountryStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - country-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CountryStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update CountryStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - country-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete CountryStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - country-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/country-statuses/CountryStatusService.ts/count:
    get:
      summary: Count the number of CountryStatus
      tags:
        - country-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of CountryStatus by CountryStatusFilterOptions
      tags:
        - country-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/country-statuses/CountryStatusService.ts/search:
    post:
      summary: Search CountryStatus by CountryStatusFilterOptions
      tags:
        - country-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CountryStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zones/ZoneService.ts:
    get:
      summary: List Zone
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - zones
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Zone'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Zone
      tags:
        - zones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zones/ZoneService.ts/{id}:
    get:
      summary: Get Zone by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - zones
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Zone'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Zone by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - zones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Zone by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - zones
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zones/ZoneService.ts/count:
    get:
      summary: Count the number of Zone
      tags:
        - zones
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Zone by ZoneFilterOptions
      tags:
        - zones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Code: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Code: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zones/ZoneService.ts/search:
    post:
      summary: Search Zone by ZoneFilterOptions
      tags:
        - zones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Code: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Code: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Zone'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zone-statuses/ZoneStatusService.ts:
    get:
      summary: List ZoneStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - zone-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ZoneStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ZoneStatus
      tags:
        - zone-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zone-statuses/ZoneStatusService.ts/{id}:
    get:
      summary: Get ZoneStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - zone-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ZoneStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ZoneStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - zone-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ZoneStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - zone-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zone-statuses/ZoneStatusService.ts/count:
    get:
      summary: Count the number of ZoneStatus
      tags:
        - zone-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ZoneStatus by ZoneStatusFilterOptions
      tags:
        - zone-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/zone-statuses/ZoneStatusService.ts/search:
    post:
      summary: Search ZoneStatus by ZoneStatusFilterOptions
      tags:
        - zone-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ZoneStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/order-statuses/OrderStatusService.ts:
    get:
      summary: List OrderStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - order-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/OrderStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create OrderStatus
      tags:
        - order-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/order-statuses/OrderStatusService.ts/{id}:
    get:
      summary: Get OrderStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - order-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/OrderStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update OrderStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - order-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete OrderStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - order-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/order-statuses/OrderStatusService.ts/count:
    get:
      summary: Count the number of OrderStatus
      tags:
        - order-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of OrderStatus by OrderStatusFilterOptions
      tags:
        - order-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/order-statuses/OrderStatusService.ts/search:
    post:
      summary: Search OrderStatus by OrderStatusFilterOptions
      tags:
        - order-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/OrderStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/languages/LanguageService.ts:
    get:
      summary: List Language
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - languages
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Language'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Language
      tags:
        - languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/languages/LanguageService.ts/{id}:
    get:
      summary: Get Language by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - languages
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Language'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Language by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Language by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - languages
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/languages/LanguageService.ts/count:
    get:
      summary: Count the number of Language
      tags:
        - languages
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Language by LanguageFilterOptions
      tags:
        - languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Code: "abcd"
                      Locale: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Code: "abcd"
                      Locale: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/languages/LanguageService.ts/search:
    post:
      summary: Search Language by LanguageFilterOptions
      tags:
        - languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Code: "abcd"
                      Locale: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Code: "abcd"
                      Locale: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Language'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/language-statuses/LanguageStatusService.ts:
    get:
      summary: List LanguageStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - language-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/LanguageStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create LanguageStatus
      tags:
        - language-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/language-statuses/LanguageStatusService.ts/{id}:
    get:
      summary: Get LanguageStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - language-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/LanguageStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update LanguageStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - language-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete LanguageStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - language-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/language-statuses/LanguageStatusService.ts/count:
    get:
      summary: Count the number of LanguageStatus
      tags:
        - language-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of LanguageStatus by LanguageStatusFilterOptions
      tags:
        - language-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/language-statuses/LanguageStatusService.ts/search:
    post:
      summary: Search LanguageStatus by LanguageStatusFilterOptions
      tags:
        - language-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/LanguageStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customer-statuses/CustomerStatusService.ts:
    get:
      summary: List CustomerStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - customer-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CustomerStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create CustomerStatus
      tags:
        - customer-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customer-statuses/CustomerStatusService.ts/{id}:
    get:
      summary: Get CustomerStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - customer-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CustomerStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update CustomerStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - customer-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete CustomerStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - customer-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customer-statuses/CustomerStatusService.ts/count:
    get:
      summary: Count the number of CustomerStatus
      tags:
        - customer-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of CustomerStatus by CustomerStatusFilterOptions
      tags:
        - customer-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/customer-statuses/CustomerStatusService.ts/search:
    post:
      summary: Search CustomerStatus by CustomerStatusFilterOptions
      tags:
        - customer-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CustomerStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderItemService.ts:
    get:
      summary: List SalesOrderItem
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderItem'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrderItem
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItem'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderItem'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderItemService.ts/{id}:
    get:
      summary: Get SalesOrderItem by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderItem'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrderItem by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItem'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderItem'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrderItem by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderItemService.ts/count:
    get:
      summary: Count the number of SalesOrderItem
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrderItem by SalesOrderItemFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItemFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Model: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Model: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderItemService.ts/search:
    post:
      summary: Search SalesOrderItem by SalesOrderItemFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItemFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Model: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Model: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderItem'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductService.ts:
    get:
      summary: List Product
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Product'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Product
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductService.ts/{id}:
    get:
      summary: Get Product by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Product'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Product by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Product by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductService.ts/count:
    get:
      summary: Count the number of Product
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Product by ProductFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Model: "abcd"
                      Image: "abcd"
                      SKU: "abcd"
                      UPC: "abcd"
                      EAN: "abcd"
                      JAN: "abcd"
                      ISBN: "abcd"
                      MPN: "abcd"
                      UpdatedBy: "abcd"
                      Location: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Model: "abcd"
                      Image: "abcd"
                      SKU: "abcd"
                      UPC: "abcd"
                      EAN: "abcd"
                      JAN: "abcd"
                      ISBN: "abcd"
                      MPN: "abcd"
                      UpdatedBy: "abcd"
                      Location: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductService.ts/search:
    post:
      summary: Search Product by ProductFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Model: "abcd"
                      Image: "abcd"
                      SKU: "abcd"
                      UPC: "abcd"
                      EAN: "abcd"
                      JAN: "abcd"
                      ISBN: "abcd"
                      MPN: "abcd"
                      UpdatedBy: "abcd"
                      Location: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Model: "abcd"
                      Image: "abcd"
                      SKU: "abcd"
                      UPC: "abcd"
                      EAN: "abcd"
                      JAN: "abcd"
                      ISBN: "abcd"
                      MPN: "abcd"
                      UpdatedBy: "abcd"
                      Location: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Product'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stock-statuses/StockStatusService.ts:
    get:
      summary: List StockStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - stock-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StockStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create StockStatus
      tags:
        - stock-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stock-statuses/StockStatusService.ts/{id}:
    get:
      summary: Get StockStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stock-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StockStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update StockStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stock-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete StockStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stock-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stock-statuses/StockStatusService.ts/count:
    get:
      summary: Count the number of StockStatus
      tags:
        - stock-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of StockStatus by StockStatusFilterOptions
      tags:
        - stock-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stock-statuses/StockStatusService.ts/search:
    post:
      summary: Search StockStatus by StockStatusFilterOptions
      tags:
        - stock-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StockStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/manufacturers/ManufacturerService.ts:
    get:
      summary: List Manufacturer
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - manufacturers
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Manufacturer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Manufacturer
      tags:
        - manufacturers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manufacturer'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manufacturer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/manufacturers/ManufacturerService.ts/{id}:
    get:
      summary: Get Manufacturer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - manufacturers
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Manufacturer'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Manufacturer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - manufacturers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manufacturer'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manufacturer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Manufacturer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - manufacturers
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/manufacturers/ManufacturerService.ts/count:
    get:
      summary: Count the number of Manufacturer
      tags:
        - manufacturers
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Manufacturer by ManufacturerFilterOptions
      tags:
        - manufacturers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManufacturerFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Image: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Image: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/manufacturers/ManufacturerService.ts/search:
    post:
      summary: Search Manufacturer by ManufacturerFilterOptions
      tags:
        - manufacturers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManufacturerFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Image: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Image: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Manufacturer'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-statuses/ProductStatusService.ts:
    get:
      summary: List ProductStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - product-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ProductStatus
      tags:
        - product-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-statuses/ProductStatusService.ts/{id}:
    get:
      summary: Get ProductStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ProductStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ProductStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-statuses/ProductStatusService.ts/count:
    get:
      summary: Count the number of ProductStatus
      tags:
        - product-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ProductStatus by ProductStatusFilterOptions
      tags:
        - product-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-statuses/ProductStatusService.ts/search:
    post:
      summary: Search ProductStatus by ProductStatusFilterOptions
      tags:
        - product-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employees/EmployeeService.ts:
    get:
      summary: List Employee
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - employees
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Employee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Employee
      tags:
        - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employees/EmployeeService.ts/{id}:
    get:
      summary: Get Employee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - employees
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Employee'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Employee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Employee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - employees
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employees/EmployeeService.ts/count:
    get:
      summary: Count the number of Employee
      tags:
        - employees
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Employee by EmployeeFilterOptions
      tags:
        - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Email: "abcd"
                      Image: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Email: "abcd"
                      Image: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employees/EmployeeService.ts/search:
    post:
      summary: Search Employee by EmployeeFilterOptions
      tags:
        - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Email: "abcd"
                      Image: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Email: "abcd"
                      Image: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Employee'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employee-statuses/EmployeeStatusService.ts:
    get:
      summary: List EmployeeStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - employee-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EmployeeStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create EmployeeStatus
      tags:
        - employee-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employee-statuses/EmployeeStatusService.ts/{id}:
    get:
      summary: Get EmployeeStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - employee-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EmployeeStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EmployeeStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - employee-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EmployeeStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - employee-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employee-statuses/EmployeeStatusService.ts/count:
    get:
      summary: Count the number of EmployeeStatus
      tags:
        - employee-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of EmployeeStatus by EmployeeStatusFilterOptions
      tags:
        - employee-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/employee-statuses/EmployeeStatusService.ts/search:
    post:
      summary: Search EmployeeStatus by EmployeeStatusFilterOptions
      tags:
        - employee-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EmployeeStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderPaymentService.ts:
    get:
      summary: List SalesOrderPayment
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrderPayment
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPayment'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderPaymentService.ts/{id}:
    get:
      summary: Get SalesOrderPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderPayment'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrderPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPayment'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrderPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderPaymentService.ts/count:
    get:
      summary: Count the number of SalesOrderPayment
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrderPayment by SalesOrderPaymentFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPaymentFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderPaymentService.ts/search:
    post:
      summary: Search SalesOrderPayment by SalesOrderPaymentFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPaymentFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderPayment'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderShippingService.ts:
    get:
      summary: List SalesOrderShipping
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderShipping'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrderShipping
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderShipping'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderShipping'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderShippingService.ts/{id}:
    get:
      summary: Get SalesOrderShipping by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderShipping'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrderShipping by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderShipping'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderShipping'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrderShipping by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderShippingService.ts/count:
    get:
      summary: Count the number of SalesOrderShipping
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrderShipping by SalesOrderShippingFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderShippingFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderShippingService.ts/search:
    post:
      summary: Search SalesOrderShipping by SalesOrderShippingFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderShippingFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      FirstName: "abcd"
                      LastName: "abcd"
                      Company: "abcd"
                      Address1: "abcd"
                      Address2: "abcd"
                      City: "abcd"
                      Postcode: "abcd"
                      Method: "abcd"
                      Code: "abcd"
                      UpdatedBy: "abcd"
                      AddressFormat: "abcd"
                      CustomField: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderShipping'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/currency-statuses/CurrencyStatusService.ts:
    get:
      summary: List CurrencyStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - currency-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CurrencyStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create CurrencyStatus
      tags:
        - currency-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/currency-statuses/CurrencyStatusService.ts/{id}:
    get:
      summary: Get CurrencyStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - currency-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CurrencyStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update CurrencyStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - currency-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete CurrencyStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - currency-statuses
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/currency-statuses/CurrencyStatusService.ts/count:
    get:
      summary: Count the number of CurrencyStatus
      tags:
        - currency-statuses
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of CurrencyStatus by CurrencyStatusFilterOptions
      tags:
        - currency-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/currency-statuses/CurrencyStatusService.ts/search:
    post:
      summary: Search CurrencyStatus by CurrencyStatusFilterOptions
      tags:
        - currency-statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CurrencyStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/groups/GroupService.ts:
    get:
      summary: List Group
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Group'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Group
      tags:
        - groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/groups/GroupService.ts/{id}:
    get:
      summary: Get Group by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Group'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Group by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Group by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - groups
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/groups/GroupService.ts/count:
    get:
      summary: Count the number of Group
      tags:
        - groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Group by GroupFilterOptions
      tags:
        - groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      UpdatedBy: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/groups/GroupService.ts/search:
    post:
      summary: Search Group by GroupFilterOptions
      tags:
        - groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      UpdatedBy: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Group'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeService.ts:
    get:
      summary: List Attribute
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - product-attributes
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Attribute'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Attribute
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeService.ts/{id}:
    get:
      summary: Get Attribute by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-attributes
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Attribute'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Attribute by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Attribute by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-attributes
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeService.ts/count:
    get:
      summary: Count the number of Attribute
      tags:
        - product-attributes
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Attribute by AttributeFilterOptions
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeService.ts/search:
    post:
      summary: Search Attribute by AttributeFilterOptions
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Attribute'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductAttributeService.ts:
    get:
      summary: List ProductAttribute
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductAttribute'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ProductAttribute
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAttribute'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAttribute'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductAttributeService.ts/{id}:
    get:
      summary: Get ProductAttribute by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductAttribute'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ProductAttribute by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAttribute'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAttribute'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ProductAttribute by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductAttributeService.ts/count:
    get:
      summary: Count the number of ProductAttribute
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ProductAttribute by ProductAttributeFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAttributeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductAttributeService.ts/search:
    post:
      summary: Search ProductAttribute by ProductAttributeFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAttributeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductAttribute'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupService.ts:
    get:
      summary: List AttributeGroup
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - attribute-groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeGroup'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create AttributeGroup
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroup'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupService.ts/{id}:
    get:
      summary: Get AttributeGroup by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - attribute-groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeGroup'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update AttributeGroup by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroup'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete AttributeGroup by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - attribute-groups
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupService.ts/count:
    get:
      summary: Count the number of AttributeGroup
      tags:
        - attribute-groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of AttributeGroup by AttributeGroupFilterOptions
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupService.ts/search:
    post:
      summary: Search AttributeGroup by AttributeGroupFilterOptions
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeGroup'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderCommentService.ts:
    get:
      summary: List SalesOrderComment
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderComment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrderComment
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderComment'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderComment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderCommentService.ts/{id}:
    get:
      summary: Get SalesOrderComment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderComment'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrderComment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderComment'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderComment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrderComment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - sales-orders
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderCommentService.ts/count:
    get:
      summary: Count the number of SalesOrderComment
      tags:
        - sales-orders
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrderComment by SalesOrderCommentFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderCommentFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                      CreatedBy: "abcd"
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
                      CreatedBy: "abcd"
                      UpdatedBy: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/sales-orders/SalesOrderCommentService.ts/search:
    post:
      summary: Search SalesOrderComment by SalesOrderCommentFilterOptions
      tags:
        - sales-orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderCommentFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                      CreatedBy: "abcd"
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
                      CreatedBy: "abcd"
                      UpdatedBy: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderComment'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeTranslationService.ts:
    get:
      summary: List AttributeTranslation
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - product-attributes
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create AttributeTranslation
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeTranslation'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeTranslationService.ts/{id}:
    get:
      summary: Get AttributeTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-attributes
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeTranslation'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update AttributeTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeTranslation'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete AttributeTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-attributes
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeTranslationService.ts/count:
    get:
      summary: Count the number of AttributeTranslation
      tags:
        - product-attributes
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of AttributeTranslation by AttributeTranslationFilterOptions
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeTranslationFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-attributes/AttributeTranslationService.ts/search:
    post:
      summary: Search AttributeTranslation by AttributeTranslationFilterOptions
      tags:
        - product-attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeTranslationFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeTranslation'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductDescriptionService.ts:
    get:
      summary: List ProductDescription
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductDescription'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ProductDescription
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescription'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductDescriptionService.ts/{id}:
    get:
      summary: Get ProductDescription by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductDescription'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ProductDescription by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescription'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ProductDescription by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductDescriptionService.ts/count:
    get:
      summary: Count the number of ProductDescription
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ProductDescription by ProductDescriptionFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescriptionFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Tag: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Tag: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductDescriptionService.ts/search:
    post:
      summary: Search ProductDescription by ProductDescriptionFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescriptionFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Tag: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Tag: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductDescription'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/permissions/PermissionService.ts:
    get:
      summary: List Permission
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - permissions
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Permission'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Permission
      tags:
        - permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/permissions/PermissionService.ts/{id}:
    get:
      summary: Get Permission by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - permissions
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Permission'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Permission by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Permission by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - permissions
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/permissions/PermissionService.ts/count:
    get:
      summary: Count the number of Permission
      tags:
        - permissions
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Permission by PermissionFilterOptions
      tags:
        - permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/permissions/PermissionService.ts/search:
    post:
      summary: Search Permission by PermissionFilterOptions
      tags:
        - permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Permission'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-employees/GroupEmployeeService.ts:
    get:
      summary: List GroupEmployee
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - group-employees
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/GroupEmployee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create GroupEmployee
      tags:
        - group-employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupEmployee'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEmployee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-employees/GroupEmployeeService.ts/{id}:
    get:
      summary: Get GroupEmployee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - group-employees
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/GroupEmployee'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update GroupEmployee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - group-employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupEmployee'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEmployee'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete GroupEmployee by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - group-employees
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-employees/GroupEmployeeService.ts/count:
    get:
      summary: Count the number of GroupEmployee
      tags:
        - group-employees
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of GroupEmployee by GroupEmployeeFilterOptions
      tags:
        - group-employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupEmployeeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      UpdatedBy: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-employees/GroupEmployeeService.ts/search:
    post:
      summary: Search GroupEmployee by GroupEmployeeFilterOptions
      tags:
        - group-employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupEmployeeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      UpdatedBy: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/GroupEmployee'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-permissions/GroupPermissionService.ts:
    get:
      summary: List GroupPermission
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - group-permissions
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/GroupPermission'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create GroupPermission
      tags:
        - group-permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPermission'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPermission'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-permissions/GroupPermissionService.ts/{id}:
    get:
      summary: Get GroupPermission by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - group-permissions
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/GroupPermission'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update GroupPermission by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - group-permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPermission'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPermission'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete GroupPermission by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - group-permissions
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-permissions/GroupPermissionService.ts/count:
    get:
      summary: Count the number of GroupPermission
      tags:
        - group-permissions
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of GroupPermission by GroupPermissionFilterOptions
      tags:
        - group-permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPermissionFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      UpdatedBy: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/group-permissions/GroupPermissionService.ts/search:
    post:
      summary: Search GroupPermission by GroupPermissionFilterOptions
      tags:
        - group-permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPermissionFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      UpdatedBy: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      UpdatedBy: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/GroupPermission'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/entity-references/EntityReferenceService.ts:
    get:
      summary: List EntityReference
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entity-references
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EntityReference'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create EntityReference
      tags:
        - entity-references
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityReference'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityReference'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/entity-references/EntityReferenceService.ts/{id}:
    get:
      summary: Get EntityReference by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entity-references
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EntityReference'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update EntityReference by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entity-references
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityReference'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityReference'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete EntityReference by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entity-references
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/entity-references/EntityReferenceService.ts/count:
    get:
      summary: Count the number of EntityReference
      tags:
        - entity-references
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of EntityReference by EntityReferenceFilterOptions
      tags:
        - entity-references
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityReferenceFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EntityName: "abcd"
                      EntityStringId: "abcd"
                      ReferenceStringId: "abcd"
                      ScopeStringId: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      EntityName: "abcd"
                      EntityStringId: "abcd"
                      ReferenceStringId: "abcd"
                      ScopeStringId: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/entity-references/EntityReferenceService.ts/search:
    post:
      summary: Search EntityReference by EntityReferenceFilterOptions
      tags:
        - entity-references
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityReferenceFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      EntityName: "abcd"
                      EntityStringId: "abcd"
                      ReferenceStringId: "abcd"
                      ScopeStringId: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      EntityName: "abcd"
                      EntityStringId: "abcd"
                      ReferenceStringId: "abcd"
                      ScopeStringId: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/EntityReference'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreConfigurationService.ts:
    get:
      summary: List StoreConfiguration
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - stores
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreConfiguration'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create StoreConfiguration
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfiguration'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreConfiguration'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreConfigurationService.ts/{id}:
    get:
      summary: Get StoreConfiguration by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stores
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreConfiguration'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update StoreConfiguration by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfiguration'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreConfiguration'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete StoreConfiguration by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - stores
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreConfigurationService.ts/count:
    get:
      summary: Count the number of StoreConfiguration
      tags:
        - stores
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of StoreConfiguration by StoreConfigurationFilterOptions
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfigurationFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Value: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Value: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/stores/StoreConfigurationService.ts/search:
    post:
      summary: Search StoreConfiguration by StoreConfigurationFilterOptions
      tags:
        - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfigurationFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Value: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Value: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreConfiguration'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-configurations/StoreConfigurationPropertyService.ts:
    get:
      summary: List StoreConfigurationProperty
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - store-configurations
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreConfigurationProperty'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create StoreConfigurationProperty
      tags:
        - store-configurations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfigurationProperty'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreConfigurationProperty'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-configurations/StoreConfigurationPropertyService.ts/{id}:
    get:
      summary: Get StoreConfigurationProperty by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - store-configurations
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreConfigurationProperty'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update StoreConfigurationProperty by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - store-configurations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfigurationProperty'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreConfigurationProperty'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete StoreConfigurationProperty by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - store-configurations
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-configurations/StoreConfigurationPropertyService.ts/count:
    get:
      summary: Count the number of StoreConfigurationProperty
      tags:
        - store-configurations
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of StoreConfigurationProperty by StoreConfigurationPropertyFilterOptions
      tags:
        - store-configurations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfigurationPropertyFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-configurations/StoreConfigurationPropertyService.ts/search:
    post:
      summary: Search StoreConfigurationProperty by StoreConfigurationPropertyFilterOptions
      tags:
        - store-configurations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConfigurationPropertyFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreConfigurationProperty'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-types/StoreTypeService.ts:
    get:
      summary: List StoreType
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - store-types
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create StoreType
      tags:
        - store-types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreType'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-types/StoreTypeService.ts/{id}:
    get:
      summary: Get StoreType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - store-types
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreType'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update StoreType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - store-types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreType'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete StoreType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - store-types
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-types/StoreTypeService.ts/count:
    get:
      summary: Count the number of StoreType
      tags:
        - store-types
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of StoreType by StoreTypeFilterOptions
      tags:
        - store-types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTypeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/store-types/StoreTypeService.ts/search:
    post:
      summary: Search StoreType by StoreTypeFilterOptions
      tags:
        - store-types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTypeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StoreType'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToStoreService.ts:
    get:
      summary: List ProductToStore
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductToStore'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ProductToStore
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToStore'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductToStore'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToStoreService.ts/{id}:
    get:
      summary: Get ProductToStore by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductToStore'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ProductToStore by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToStore'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductToStore'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ProductToStore by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToStoreService.ts/count:
    get:
      summary: Count the number of ProductToStore
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ProductToStore by ProductToStoreFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToStoreFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToStoreService.ts/search:
    post:
      summary: Search ProductToStore by ProductToStoreFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToStoreFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductToStore'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupTranslationService.ts:
    get:
      summary: List AttributeGroupTranslation
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - attribute-groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeGroupTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create AttributeGroupTranslation
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupTranslation'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroupTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupTranslationService.ts/{id}:
    get:
      summary: Get AttributeGroupTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - attribute-groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeGroupTranslation'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update AttributeGroupTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupTranslation'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroupTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete AttributeGroupTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - attribute-groups
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupTranslationService.ts/count:
    get:
      summary: Count the number of AttributeGroupTranslation
      tags:
        - attribute-groups
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of AttributeGroupTranslation by AttributeGroupTranslationFilterOptions
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupTranslationFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/attribute-groups/AttributeGroupTranslationService.ts/search:
    post:
      summary: Search AttributeGroupTranslation by AttributeGroupTranslationFilterOptions
      tags:
        - attribute-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupTranslationFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Text: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Text: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/AttributeGroupTranslation'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryService.ts:
    get:
      summary: List Category
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - product-categories
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Category'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Category
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryService.ts/{id}:
    get:
      summary: Get Category by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-categories
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Category'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Category by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Category by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-categories
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryService.ts/count:
    get:
      summary: Count the number of Category
      tags:
        - product-categories
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Category by CategoryFilterOptions
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Image: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Image: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryService.ts/search:
    post:
      summary: Search Category by CategoryFilterOptions
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Image: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Image: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Category'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToCategoryService.ts:
    get:
      summary: List ProductToCategory
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductToCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ProductToCategory
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToCategory'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductToCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToCategoryService.ts/{id}:
    get:
      summary: Get ProductToCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductToCategory'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ProductToCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToCategory'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductToCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ProductToCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - products
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToCategoryService.ts/count:
    get:
      summary: Count the number of ProductToCategory
      tags:
        - products
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ProductToCategory by ProductToCategoryFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToCategoryFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/products/ProductToCategoryService.ts/search:
    post:
      summary: Search ProductToCategory by ProductToCategoryFilterOptions
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToCategoryFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ProductToCategory'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryTranslationService.ts:
    get:
      summary: List CategoryTranslation
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - product-categories
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CategoryTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create CategoryTranslation
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryTranslation'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryTranslationService.ts/{id}:
    get:
      summary: Get CategoryTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-categories
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CategoryTranslation'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update CategoryTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryTranslation'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryTranslation'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete CategoryTranslation by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - product-categories
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryTranslationService.ts/count:
    get:
      summary: Count the number of CategoryTranslation
      tags:
        - product-categories
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of CategoryTranslation by CategoryTranslationFilterOptions
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryTranslationFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-electra/gen/api/product-categories/CategoryTranslationService.ts/search:
    post:
      summary: Search CategoryTranslation by CategoryTranslationFilterOptions
      tags:
        - product-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryTranslationFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      MetaTitle: "abcd"
                      MetaDescription: "abcd"
                      MetaKeyword: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CategoryTranslation'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Currency:
      type: object
      required:
        - Title
        - Status
        - Code
        - DecimalPlace
        - Value
      properties:
        Id:
          type: integer
          format: int32
        Title:
          type: string
          minLength: 0
          maxLength: 32
        Status:
          type: integer
          format: int32
        Code:
          type: string
          minLength: 0
          maxLength: 3
        SymbolLeft:
          type: string
          minLength: 0
          maxLength: 12
        SymbolRight:
          type: string
          minLength: 0
          maxLength: 12
        DecimalPlace:
          type: string
          minLength: 0
          maxLength: 1
        Value:
          type: number
          format: double
        DateModified:
    CurrencyFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Title:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 3
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 3
                SymbolLeft:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 12
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 12
                SymbolRight:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 12
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 12
                DecimalPlace:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 1
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 1
                Value:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                DateModified:
                  oneOf:
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Title:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 3
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 3
                SymbolLeft:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 12
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 12
                SymbolRight:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 12
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 12
                DecimalPlace:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 1
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 1
                Value:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                DateModified:
                  oneOf:
            contains:
              type: object
              properties:
                Id:
                Title:
                  type: string
                  minLength: 0
                  maxLength: 32
                Status:
                Code:
                  type: string
                  minLength: 0
                  maxLength: 3
                SymbolLeft:
                  type: string
                  minLength: 0
                  maxLength: 12
                SymbolRight:
                  type: string
                  minLength: 0
                  maxLength: 12
                DecimalPlace:
                  type: string
                  minLength: 0
                  maxLength: 1
                Value:
                DateModified:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Title:
                  type: string
                  minLength: 0
                  maxLength: 32
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 3
                SymbolLeft:
                  type: string
                  minLength: 0
                  maxLength: 12
                SymbolRight:
                  type: string
                  minLength: 0
                  maxLength: 12
                DecimalPlace:
                  type: string
                  minLength: 0
                  maxLength: 1
                Value:
                  type: number
                  format: double
                DateModified:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Title:
                  type: string
                  minLength: 0
                  maxLength: 32
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 3
                SymbolLeft:
                  type: string
                  minLength: 0
                  maxLength: 12
                SymbolRight:
                  type: string
                  minLength: 0
                  maxLength: 12
                DecimalPlace:
                  type: string
                  minLength: 0
                  maxLength: 1
                Value:
                  type: number
                  format: double
                DateModified:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Title:
                  type: string
                  minLength: 0
                  maxLength: 32
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 3
                SymbolLeft:
                  type: string
                  minLength: 0
                  maxLength: 12
                SymbolRight:
                  type: string
                  minLength: 0
                  maxLength: 12
                DecimalPlace:
                  type: string
                  minLength: 0
                  maxLength: 1
                Value:
                  type: number
                  format: double
                DateModified:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Title:
                  type: string
                  minLength: 0
                  maxLength: 32
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 3
                SymbolLeft:
                  type: string
                  minLength: 0
                  maxLength: 12
                SymbolRight:
                  type: string
                  minLength: 0
                  maxLength: 12
                DecimalPlace:
                  type: string
                  minLength: 0
                  maxLength: 1
                Value:
                  type: number
                  format: double
                DateModified:
        $select:
          type: array
          example: ["Id", "Title", "Status", "Code", "SymbolLeft", "SymbolRight", "DecimalPlace", "Value", "DateModified"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Title,Status,Code,SymbolLeft,SymbolRight,DecimalPlace,Value,DateModified"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrder:
      type: object
      required:
        - Store
        - Status
        - Total
        - SubTotal
        - Tax
        - Shipping
        - Currency
        - Customer
        - Language
      properties:
        Id:
          type: integer
          format: int32
        Number:
          type: string
          minLength: 0
          maxLength: 20
          readOnly: true
        Store:
          type: integer
          format: int32
        Status:
          type: integer
          format: int32
        Total:
          type: number
          format: double
        SubTotal:
          type: number
          format: double
        Tax:
          type: number
          format: double
        Shipping:
          type: number
          format: double
        Currency:
          type: integer
          format: int32
        Customer:
          type: integer
          format: int32
        DateAdded:
        DateModified:
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        Tracking:
          type: string
          minLength: 0
          maxLength: 255
        Comment:
          type: string
          minLength: 0
          maxLength: 2000
        InvoiceNumber:
          type: integer
          format: int32
        InvoicePrefix:
          type: string
          minLength: 0
          maxLength: 26
        Language:
          type: integer
          format: int32
    SalesOrderFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Number:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Total:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                SubTotal:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Tax:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Shipping:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Currency:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                Tracking:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Comment:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                InvoiceNumber:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                InvoicePrefix:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 26
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 26
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Number:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Total:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                SubTotal:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Tax:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Shipping:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Currency:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                Tracking:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Comment:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                InvoiceNumber:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                InvoicePrefix:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 26
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 26
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Number:
                  type: string
                  minLength: 0
                  maxLength: 20
                Store:
                Status:
                Total:
                SubTotal:
                Tax:
                Shipping:
                Currency:
                Customer:
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Tracking:
                  type: string
                  minLength: 0
                  maxLength: 255
                Comment:
                  type: string
                  minLength: 0
                  maxLength: 2000
                InvoiceNumber:
                InvoicePrefix:
                  type: string
                  minLength: 0
                  maxLength: 26
                Language:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Number:
                  type: string
                  minLength: 0
                  maxLength: 20
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Total:
                  type: number
                  format: double
                SubTotal:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
                Shipping:
                  type: number
                  format: double
                Currency:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Tracking:
                  type: string
                  minLength: 0
                  maxLength: 255
                Comment:
                  type: string
                  minLength: 0
                  maxLength: 2000
                InvoiceNumber:
                  type: integer
                  format: int32
                InvoicePrefix:
                  type: string
                  minLength: 0
                  maxLength: 26
                Language:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Number:
                  type: string
                  minLength: 0
                  maxLength: 20
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Total:
                  type: number
                  format: double
                SubTotal:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
                Shipping:
                  type: number
                  format: double
                Currency:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Tracking:
                  type: string
                  minLength: 0
                  maxLength: 255
                Comment:
                  type: string
                  minLength: 0
                  maxLength: 2000
                InvoiceNumber:
                  type: integer
                  format: int32
                InvoicePrefix:
                  type: string
                  minLength: 0
                  maxLength: 26
                Language:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Number:
                  type: string
                  minLength: 0
                  maxLength: 20
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Total:
                  type: number
                  format: double
                SubTotal:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
                Shipping:
                  type: number
                  format: double
                Currency:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Tracking:
                  type: string
                  minLength: 0
                  maxLength: 255
                Comment:
                  type: string
                  minLength: 0
                  maxLength: 2000
                InvoiceNumber:
                  type: integer
                  format: int32
                InvoicePrefix:
                  type: string
                  minLength: 0
                  maxLength: 26
                Language:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Number:
                  type: string
                  minLength: 0
                  maxLength: 20
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Total:
                  type: number
                  format: double
                SubTotal:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
                Shipping:
                  type: number
                  format: double
                Currency:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Tracking:
                  type: string
                  minLength: 0
                  maxLength: 255
                Comment:
                  type: string
                  minLength: 0
                  maxLength: 2000
                InvoiceNumber:
                  type: integer
                  format: int32
                InvoicePrefix:
                  type: string
                  minLength: 0
                  maxLength: 26
                Language:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Number", "Store", "Status", "Total", "SubTotal", "Tax", "Shipping", "Currency", "Customer", "DateAdded", "DateModified", "UpdatedBy", "Tracking", "Comment", "InvoiceNumber", "InvoicePrefix", "Language"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Number,Store,Status,Total,SubTotal,Tax,Shipping,Currency,Customer,DateAdded,DateModified,UpdatedBy,Tracking,Comment,InvoiceNumber,InvoicePrefix,Language"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Store:
      type: object
      required:
        - Name
        - Url
        - Type
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 64
        Url:
          type: string
          minLength: 0
          maxLength: 255
        Type:
          type: integer
          format: int32
        Enabled:
          type: boolean
    StoreFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Url:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Type:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Enabled:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Url:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Type:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Enabled:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Url:
                  type: string
                  minLength: 0
                  maxLength: 255
                Type:
                Enabled:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Url:
                  type: string
                  minLength: 0
                  maxLength: 255
                Type:
                  type: integer
                  format: int32
                Enabled:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Url:
                  type: string
                  minLength: 0
                  maxLength: 255
                Type:
                  type: integer
                  format: int32
                Enabled:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Url:
                  type: string
                  minLength: 0
                  maxLength: 255
                Type:
                  type: integer
                  format: int32
                Enabled:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Url:
                  type: string
                  minLength: 0
                  maxLength: 255
                Type:
                  type: integer
                  format: int32
                Enabled:
        $select:
          type: array
          example: ["Id", "Name", "Url", "Type", "Enabled"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Url,Type,Enabled"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Customer:
      type: object
      required:
        - Email
        - FirstName
        - LastName
        - Store
        - Status
        - Language
      properties:
        Id:
          type: integer
          format: int32
        Email:
          type: string
          minLength: 0
          maxLength: 96
        FirstName:
          type: string
          minLength: 0
          maxLength: 32
        LastName:
          type: string
          minLength: 0
          maxLength: 32
        Store:
          type: integer
          format: int32
        Status:
          type: integer
          format: int32
        Telephone:
          type: string
          minLength: 0
          maxLength: 32
        DateAdded:
        CustomField:
          type: string
          minLength: 0
          maxLength: 2000
        Language:
          type: integer
          format: int32
    CustomerFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Telephone:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                DateAdded:
                  oneOf:
                CustomField:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Telephone:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                DateAdded:
                  oneOf:
                CustomField:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Store:
                Status:
                Telephone:
                  type: string
                  minLength: 0
                  maxLength: 32
                DateAdded:
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                Language:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Telephone:
                  type: string
                  minLength: 0
                  maxLength: 32
                DateAdded:
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                Language:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Telephone:
                  type: string
                  minLength: 0
                  maxLength: 32
                DateAdded:
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                Language:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Telephone:
                  type: string
                  minLength: 0
                  maxLength: 32
                DateAdded:
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                Language:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Store:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                Telephone:
                  type: string
                  minLength: 0
                  maxLength: 32
                DateAdded:
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                Language:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Email", "FirstName", "LastName", "Store", "Status", "Telephone", "DateAdded", "CustomField", "Language"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Email,FirstName,LastName,Store,Status,Telephone,DateAdded,CustomField,Language"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Country:
      type: object
      required:
        - Name
        - Status
        - IsoCode2
        - IsoCode3
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 128
        Status:
          type: integer
          format: int32
        IsoCode2:
          type: string
          minLength: 0
          maxLength: 2
        IsoCode3:
          type: string
          minLength: 0
          maxLength: 3
        PostcodeRequired:
          type: boolean
    CountryFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                IsoCode2:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2
                IsoCode3:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 3
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 3
                PostcodeRequired:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                IsoCode2:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2
                IsoCode3:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 3
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 3
                PostcodeRequired:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                IsoCode2:
                  type: string
                  minLength: 0
                  maxLength: 2
                IsoCode3:
                  type: string
                  minLength: 0
                  maxLength: 3
                PostcodeRequired:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                IsoCode2:
                  type: string
                  minLength: 0
                  maxLength: 2
                IsoCode3:
                  type: string
                  minLength: 0
                  maxLength: 3
                PostcodeRequired:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                IsoCode2:
                  type: string
                  minLength: 0
                  maxLength: 2
                IsoCode3:
                  type: string
                  minLength: 0
                  maxLength: 3
                PostcodeRequired:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                IsoCode2:
                  type: string
                  minLength: 0
                  maxLength: 2
                IsoCode3:
                  type: string
                  minLength: 0
                  maxLength: 3
                PostcodeRequired:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                IsoCode2:
                  type: string
                  minLength: 0
                  maxLength: 2
                IsoCode3:
                  type: string
                  minLength: 0
                  maxLength: 3
                PostcodeRequired:
        $select:
          type: array
          example: ["Id", "Name", "Status", "IsoCode2", "IsoCode3", "PostcodeRequired"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Status,IsoCode2,IsoCode3,PostcodeRequired"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    CountryStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    CountryStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Zone:
      type: object
      required:
        - Country
        - Name
        - Status
        - Code
      properties:
        Id:
          type: integer
          format: int32
        Country:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 128
        Status:
          type: integer
          format: int32
        Code:
          type: string
          minLength: 0
          maxLength: 32
    ZoneFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            contains:
              type: object
              properties:
                Id:
                Country:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                Code:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Country:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Country:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Country:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Country:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 128
                Status:
                  type: integer
                  format: int32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 32
        $select:
          type: array
          example: ["Id", "Country", "Name", "Status", "Code"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Country,Name,Status,Code"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ZoneStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    ZoneStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    OrderStatus:
      type: object
      required:
        - Language
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Language:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 32
    OrderStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            contains:
              type: object
              properties:
                Id:
                Language:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
        $select:
          type: array
          example: ["Id", "Language", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Language,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Language:
      type: object
      required:
        - Name
        - Code
        - Locale
        - Status
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 32
        Code:
          type: string
          minLength: 0
          maxLength: 5
        Locale:
          type: string
          minLength: 0
          maxLength: 255
        Status:
          type: integer
          format: int32
    LanguageFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 5
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 5
                Locale:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 5
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 5
                Locale:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 5
                Locale:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 5
                Locale:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 5
                Locale:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 5
                Locale:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
                Code:
                  type: string
                  minLength: 0
                  maxLength: 5
                Locale:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Code", "Locale", "Status"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Code,Locale,Status"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    LanguageStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    LanguageStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    CustomerStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    CustomerStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrderItem:
      type: object
      required:
        - Product
        - SalesOrder
        - Name
        - Model
        - Quantity
        - Price
        - Total
        - Tax
      properties:
        Id:
          type: integer
          format: int32
        Product:
          type: integer
          format: int32
        SalesOrder:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 255
        Model:
          type: string
          minLength: 0
          maxLength: 64
        Quantity:
          type: integer
          format: int32
        Price:
          type: number
          format: double
        Total:
          type: number
          format: double
        Tax:
          type: number
          format: double
    SalesOrderItemFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Model:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Quantity:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Total:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Tax:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Model:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Quantity:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Total:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Tax:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            contains:
              type: object
              properties:
                Id:
                Product:
                SalesOrder:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Quantity:
                Price:
                Total:
                Tax:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Total:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Total:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Total:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Total:
                  type: number
                  format: double
                Tax:
                  type: number
                  format: double
        $select:
          type: array
          example: ["Id", "Product", "SalesOrder", "Name", "Model", "Quantity", "Price", "Total", "Tax"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Product,SalesOrder,Name,Model,Quantity,Price,Total,Tax"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Product:
      type: object
      required:
        - Model
        - Manufacturer
        - Quantity
        - Price
        - DateAvailable
        - Weight
        - Length
        - Width
        - Height
        - Points
        - Location
        - Minimum
        - StockStatus
      properties:
        Id:
          type: integer
          format: int32
        Model:
          type: string
          minLength: 0
          maxLength: 64
        Manufacturer:
          type: integer
          format: int32
        Status:
          type: boolean
        Quantity:
          type: integer
          format: int32
        Price:
          type: number
          format: double
        Image:
          type: string
          minLength: 0
          maxLength: 255
        SKU:
          type: string
          minLength: 0
          maxLength: 64
        UPC:
          type: string
          minLength: 0
          maxLength: 12
        EAN:
          type: string
          minLength: 0
          maxLength: 14
        JAN:
          type: string
          minLength: 0
          maxLength: 13
        ISBN:
          type: string
          minLength: 0
          maxLength: 17
        MPN:
          type: string
          minLength: 0
          maxLength: 64
        DateAvailable:
        Weight:
          type: number
          format: double
        Length:
          type: number
          format: double
        Width:
          type: number
          format: double
        Height:
          type: number
          format: double
        DateAdded:
        DateModified:
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        Points:
          type: integer
          format: int32
        Shipping:
          type: boolean
        Location:
          type: string
          minLength: 0
          maxLength: 128
        Subtract:
          type: boolean
        Minimum:
          type: integer
          format: int32
        StockStatus:
          type: integer
          format: int32
    ProductFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Model:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Manufacturer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Quantity:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                SKU:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                UPC:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 12
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 12
                EAN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 14
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 14
                JAN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 13
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 13
                ISBN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 17
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 17
                MPN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                DateAvailable:
                  oneOf:
                Weight:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Length:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Width:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Height:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                Points:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Shipping:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Location:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Subtract:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Minimum:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StockStatus:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Model:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Manufacturer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Quantity:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                SKU:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                UPC:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 12
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 12
                EAN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 14
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 14
                JAN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 13
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 13
                ISBN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 17
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 17
                MPN:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                DateAvailable:
                  oneOf:
                Weight:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Length:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Width:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Height:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                Points:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Shipping:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Location:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Subtract:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Minimum:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StockStatus:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Manufacturer:
                Status:
                Quantity:
                Price:
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                SKU:
                  type: string
                  minLength: 0
                  maxLength: 64
                UPC:
                  type: string
                  minLength: 0
                  maxLength: 12
                EAN:
                  type: string
                  minLength: 0
                  maxLength: 14
                JAN:
                  type: string
                  minLength: 0
                  maxLength: 13
                ISBN:
                  type: string
                  minLength: 0
                  maxLength: 17
                MPN:
                  type: string
                  minLength: 0
                  maxLength: 64
                DateAvailable:
                Weight:
                Length:
                Width:
                Height:
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Points:
                Shipping:
                Location:
                  type: string
                  minLength: 0
                  maxLength: 128
                Subtract:
                Minimum:
                StockStatus:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Manufacturer:
                  type: integer
                  format: int32
                Status:
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                SKU:
                  type: string
                  minLength: 0
                  maxLength: 64
                UPC:
                  type: string
                  minLength: 0
                  maxLength: 12
                EAN:
                  type: string
                  minLength: 0
                  maxLength: 14
                JAN:
                  type: string
                  minLength: 0
                  maxLength: 13
                ISBN:
                  type: string
                  minLength: 0
                  maxLength: 17
                MPN:
                  type: string
                  minLength: 0
                  maxLength: 64
                DateAvailable:
                Weight:
                  type: number
                  format: double
                Length:
                  type: number
                  format: double
                Width:
                  type: number
                  format: double
                Height:
                  type: number
                  format: double
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Points:
                  type: integer
                  format: int32
                Shipping:
                Location:
                  type: string
                  minLength: 0
                  maxLength: 128
                Subtract:
                Minimum:
                  type: integer
                  format: int32
                StockStatus:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Manufacturer:
                  type: integer
                  format: int32
                Status:
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                SKU:
                  type: string
                  minLength: 0
                  maxLength: 64
                UPC:
                  type: string
                  minLength: 0
                  maxLength: 12
                EAN:
                  type: string
                  minLength: 0
                  maxLength: 14
                JAN:
                  type: string
                  minLength: 0
                  maxLength: 13
                ISBN:
                  type: string
                  minLength: 0
                  maxLength: 17
                MPN:
                  type: string
                  minLength: 0
                  maxLength: 64
                DateAvailable:
                Weight:
                  type: number
                  format: double
                Length:
                  type: number
                  format: double
                Width:
                  type: number
                  format: double
                Height:
                  type: number
                  format: double
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Points:
                  type: integer
                  format: int32
                Shipping:
                Location:
                  type: string
                  minLength: 0
                  maxLength: 128
                Subtract:
                Minimum:
                  type: integer
                  format: int32
                StockStatus:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Manufacturer:
                  type: integer
                  format: int32
                Status:
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                SKU:
                  type: string
                  minLength: 0
                  maxLength: 64
                UPC:
                  type: string
                  minLength: 0
                  maxLength: 12
                EAN:
                  type: string
                  minLength: 0
                  maxLength: 14
                JAN:
                  type: string
                  minLength: 0
                  maxLength: 13
                ISBN:
                  type: string
                  minLength: 0
                  maxLength: 17
                MPN:
                  type: string
                  minLength: 0
                  maxLength: 64
                DateAvailable:
                Weight:
                  type: number
                  format: double
                Length:
                  type: number
                  format: double
                Width:
                  type: number
                  format: double
                Height:
                  type: number
                  format: double
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Points:
                  type: integer
                  format: int32
                Shipping:
                Location:
                  type: string
                  minLength: 0
                  maxLength: 128
                Subtract:
                Minimum:
                  type: integer
                  format: int32
                StockStatus:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Model:
                  type: string
                  minLength: 0
                  maxLength: 64
                Manufacturer:
                  type: integer
                  format: int32
                Status:
                Quantity:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                SKU:
                  type: string
                  minLength: 0
                  maxLength: 64
                UPC:
                  type: string
                  minLength: 0
                  maxLength: 12
                EAN:
                  type: string
                  minLength: 0
                  maxLength: 14
                JAN:
                  type: string
                  minLength: 0
                  maxLength: 13
                ISBN:
                  type: string
                  minLength: 0
                  maxLength: 17
                MPN:
                  type: string
                  minLength: 0
                  maxLength: 64
                DateAvailable:
                Weight:
                  type: number
                  format: double
                Length:
                  type: number
                  format: double
                Width:
                  type: number
                  format: double
                Height:
                  type: number
                  format: double
                DateAdded:
                DateModified:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                Points:
                  type: integer
                  format: int32
                Shipping:
                Location:
                  type: string
                  minLength: 0
                  maxLength: 128
                Subtract:
                Minimum:
                  type: integer
                  format: int32
                StockStatus:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Model", "Manufacturer", "Status", "Quantity", "Price", "Image", "SKU", "UPC", "EAN", "JAN", "ISBN", "MPN", "DateAvailable", "Weight", "Length", "Width", "Height", "DateAdded", "DateModified", "UpdatedBy", "Points", "Shipping", "Location", "Subtract", "Minimum", "StockStatus"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Model,Manufacturer,Status,Quantity,Price,Image,SKU,UPC,EAN,JAN,ISBN,MPN,DateAvailable,Weight,Length,Width,Height,DateAdded,DateModified,UpdatedBy,Points,Shipping,Location,Subtract,Minimum,StockStatus"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    StockStatus:
      type: object
      required:
        - Language
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Language:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 32
    StockStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            contains:
              type: object
              properties:
                Id:
                Language:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
        $select:
          type: array
          example: ["Id", "Language", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Language,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Manufacturer:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 64
        Image:
          type: string
          minLength: 0
          maxLength: 255
    ManufacturerFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
        $select:
          type: array
          example: ["Id", "Name", "Image"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Image"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ProductStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    ProductStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Employee:
      type: object
      required:
        - FirstName
        - LastName
        - Email
        - Status
      properties:
        Id:
          type: integer
          format: int32
        FirstName:
          type: string
          minLength: 0
          maxLength: 32
        LastName:
          type: string
          minLength: 0
          maxLength: 32
        Email:
          type: string
          minLength: 0
          maxLength: 96
        Status:
          type: integer
          format: int32
        Image:
          type: string
          minLength: 0
          maxLength: 255
        Code:
          type: string
          minLength: 0
          maxLength: 40
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        DateModified:
    EmployeeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Email:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            contains:
              type: object
              properties:
                Id:
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                Status:
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                Code:
                  type: string
                  minLength: 0
                  maxLength: 40
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                Status:
                  type: integer
                  format: int32
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                Code:
                  type: string
                  minLength: 0
                  maxLength: 40
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                Status:
                  type: integer
                  format: int32
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                Code:
                  type: string
                  minLength: 0
                  maxLength: 40
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                Status:
                  type: integer
                  format: int32
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                Code:
                  type: string
                  minLength: 0
                  maxLength: 40
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Email:
                  type: string
                  minLength: 0
                  maxLength: 96
                Status:
                  type: integer
                  format: int32
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                Code:
                  type: string
                  minLength: 0
                  maxLength: 40
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
        $select:
          type: array
          example: ["Id", "FirstName", "LastName", "Email", "Status", "Image", "Code", "UpdatedBy", "DateModified"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,FirstName,LastName,Email,Status,Image,Code,UpdatedBy,DateModified"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    EmployeeStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    EmployeeStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrderPayment:
      type: object
      required:
        - Zone
        - FirstName
        - LastName
        - Country
        - SalesOrder
      properties:
        Id:
          type: integer
          format: int32
        Zone:
          type: integer
          format: int32
        FirstName:
          type: string
          minLength: 0
          maxLength: 32
        LastName:
          type: string
          minLength: 0
          maxLength: 32
        Company:
          type: string
          minLength: 0
          maxLength: 60
        Address1:
          type: string
          minLength: 0
          maxLength: 128
        Address2:
          type: string
          minLength: 0
          maxLength: 128
        Country:
          type: integer
          format: int32
        City:
          type: string
          minLength: 0
          maxLength: 128
        Postcode:
          type: string
          minLength: 0
          maxLength: 10
        Method:
          type: string
          minLength: 0
          maxLength: 128
        Code:
          type: string
          minLength: 0
          maxLength: 128
        AddressFormat:
          type: string
          minLength: 0
          maxLength: 2000
        CustomField:
          type: string
          minLength: 0
          maxLength: 2000
        SalesOrder:
          type: integer
          format: int32
    SalesOrderPaymentFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Zone:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Company:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 60
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 60
                Address1:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Address2:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                City:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Postcode:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 10
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 10
                Method:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                AddressFormat:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                CustomField:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Zone:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Company:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 60
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 60
                Address1:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Address2:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                City:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Postcode:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 10
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 10
                Method:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                AddressFormat:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                CustomField:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Zone:
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 60
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 60
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 60
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 60
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 60
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Zone", "FirstName", "LastName", "Company", "Address1", "Address2", "Country", "City", "Postcode", "Method", "Code", "AddressFormat", "CustomField", "SalesOrder"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Zone,FirstName,LastName,Company,Address1,Address2,Country,City,Postcode,Method,Code,AddressFormat,CustomField,SalesOrder"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrderShipping:
      type: object
      required:
        - Zone
        - FirstName
        - LastName
        - Country
        - SalesOrder
      properties:
        Id:
          type: integer
          format: int32
        Zone:
          type: integer
          format: int32
        FirstName:
          type: string
          minLength: 0
          maxLength: 32
        LastName:
          type: string
          minLength: 0
          maxLength: 32
        Company:
          type: string
          minLength: 0
          maxLength: 40
        Address1:
          type: string
          minLength: 0
          maxLength: 128
        Address2:
          type: string
          minLength: 0
          maxLength: 128
        Country:
          type: integer
          format: int32
        City:
          type: string
          minLength: 0
          maxLength: 128
        Postcode:
          type: string
          minLength: 0
          maxLength: 10
        Method:
          type: string
          minLength: 0
          maxLength: 128
        Code:
          type: string
          minLength: 0
          maxLength: 128
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        AddressFormat:
          type: string
          minLength: 0
          maxLength: 2000
        CustomField:
          type: string
          minLength: 0
          maxLength: 2000
        SalesOrder:
          type: integer
          format: int32
    SalesOrderShippingFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Zone:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Company:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Address1:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Address2:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                City:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Postcode:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 10
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 10
                Method:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                AddressFormat:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                CustomField:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Zone:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                FirstName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                LastName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
                Company:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Address1:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Address2:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                City:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Postcode:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 10
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 10
                Method:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                Code:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 128
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 128
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                AddressFormat:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                CustomField:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Zone:
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 40
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 40
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 40
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 40
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Zone:
                  type: integer
                  format: int32
                FirstName:
                  type: string
                  minLength: 0
                  maxLength: 32
                LastName:
                  type: string
                  minLength: 0
                  maxLength: 32
                Company:
                  type: string
                  minLength: 0
                  maxLength: 40
                Address1:
                  type: string
                  minLength: 0
                  maxLength: 128
                Address2:
                  type: string
                  minLength: 0
                  maxLength: 128
                Country:
                  type: integer
                  format: int32
                City:
                  type: string
                  minLength: 0
                  maxLength: 128
                Postcode:
                  type: string
                  minLength: 0
                  maxLength: 10
                Method:
                  type: string
                  minLength: 0
                  maxLength: 128
                Code:
                  type: string
                  minLength: 0
                  maxLength: 128
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                AddressFormat:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CustomField:
                  type: string
                  minLength: 0
                  maxLength: 2000
                SalesOrder:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Zone", "FirstName", "LastName", "Company", "Address1", "Address2", "Country", "City", "Postcode", "Method", "Code", "UpdatedBy", "AddressFormat", "CustomField", "SalesOrder"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Zone,FirstName,LastName,Company,Address1,Address2,Country,City,Postcode,Method,Code,UpdatedBy,AddressFormat,CustomField,SalesOrder"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    CurrencyStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    CurrencyStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Group:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 64
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        DateModified:
    GroupFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
        $select:
          type: array
          example: ["Id", "Name", "UpdatedBy", "DateModified"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,UpdatedBy,DateModified"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Attribute:
      type: object
      required:
        - Group
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Group:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 64
    AttributeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Group:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Group:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            contains:
              type: object
              properties:
                Id:
                Group:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
        $select:
          type: array
          example: ["Id", "Group", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Group,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ProductAttribute:
      type: object
      required:
        - Product
        - Attribute
        - Language
        - Text
      properties:
        Id:
          type: integer
          format: int32
        Product:
          type: integer
          format: int32
        Attribute:
          type: integer
          format: int32
        Language:
          type: integer
          format: int32
        Text:
          type: string
          minLength: 0
          maxLength: 2000
    ProductAttributeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Attribute:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Attribute:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
            contains:
              type: object
              properties:
                Id:
                Product:
                Attribute:
                Language:
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
        $select:
          type: array
          example: ["Id", "Product", "Attribute", "Language", "Text"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Product,Attribute,Language,Text"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    AttributeGroup:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 64
    AttributeGroupFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrderComment:
      type: object
      required:
        - Text
        - SalesOrder
      properties:
        Id:
          type: integer
          format: int32
        Text:
          type: string
          minLength: 0
          maxLength: 2000
        CreatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        DateAdded:
        DateModified:
        SalesOrder:
          type: integer
          format: int32
    SalesOrderCommentFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                CreatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                CreatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CreatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateAdded:
                DateModified:
                SalesOrder:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CreatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateAdded:
                DateModified:
                SalesOrder:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CreatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateAdded:
                DateModified:
                SalesOrder:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CreatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateAdded:
                DateModified:
                SalesOrder:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 2000
                CreatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateAdded:
                DateModified:
                SalesOrder:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Text", "CreatedBy", "UpdatedBy", "DateAdded", "DateModified", "SalesOrder"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Text,CreatedBy,UpdatedBy,DateAdded,DateModified,SalesOrder"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    AttributeTranslation:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Attribute:
          type: integer
          format: int32
        Language:
          type: integer
          format: int32
        Text:
          type: string
          minLength: 0
          maxLength: 64
    AttributeTranslationFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Attribute:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Attribute:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            contains:
              type: object
              properties:
                Id:
                Attribute:
                Language:
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Attribute:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
        $select:
          type: array
          example: ["Id", "Attribute", "Language", "Text"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Attribute,Language,Text"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ProductDescription:
      type: object
      required:
        - Product
        - Language
        - Name
        - Description
        - Tag
        - MetaTitle
        - MetaDescription
        - MetaKeyword
      properties:
        Id:
          type: integer
          format: int32
        Product:
          type: integer
          format: int32
        Language:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 255
        Description:
          type: string
          minLength: 0
          maxLength: 65535
        Tag:
          type: string
          minLength: 0
          maxLength: 2000
        MetaTitle:
          type: string
          minLength: 0
          maxLength: 255
        MetaDescription:
          type: string
          minLength: 0
          maxLength: 255
        MetaKeyword:
          type: string
          minLength: 0
          maxLength: 255
    ProductDescriptionFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 65535
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 65535
                Tag:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                MetaTitle:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaDescription:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaKeyword:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 65535
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 65535
                Tag:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                MetaTitle:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaDescription:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaKeyword:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
            contains:
              type: object
              properties:
                Id:
                Product:
                Language:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 65535
                Tag:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 65535
                Tag:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 65535
                Tag:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 65535
                Tag:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 65535
                Tag:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
        $select:
          type: array
          example: ["Id", "Product", "Language", "Name", "Description", "Tag", "MetaTitle", "MetaDescription", "MetaKeyword"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Product,Language,Name,Description,Tag,MetaTitle,MetaDescription,MetaKeyword"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Permission:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 64
    PermissionFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 64
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    GroupEmployee:
      type: object
      required:
        - Employee
        - Group
      properties:
        Id:
          type: integer
          format: int32
        Employee:
          type: integer
          format: int32
        Group:
          type: integer
          format: int32
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        DateModified:
    GroupEmployeeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Employee:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Group:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Employee:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Group:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            contains:
              type: object
              properties:
                Id:
                Employee:
                Group:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
        $select:
          type: array
          example: ["Id", "Employee", "Group", "UpdatedBy", "DateModified"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Employee,Group,UpdatedBy,DateModified"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    GroupPermission:
      type: object
      required:
        - Group
        - Permission
      properties:
        Id:
          type: integer
          format: int32
        Group:
          type: integer
          format: int32
        Permission:
          type: integer
          format: int32
        UpdatedBy:
          type: string
          minLength: 0
          maxLength: 96
          readOnly: true
        DateModified:
    GroupPermissionFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Group:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Permission:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Group:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Permission:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                UpdatedBy:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 96
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 96
                DateModified:
                  oneOf:
            contains:
              type: object
              properties:
                Id:
                Group:
                Permission:
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Permission:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Permission:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Permission:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Group:
                  type: integer
                  format: int32
                Permission:
                  type: integer
                  format: int32
                UpdatedBy:
                  type: string
                  minLength: 0
                  maxLength: 96
                DateModified:
        $select:
          type: array
          example: ["Id", "Group", "Permission", "UpdatedBy", "DateModified"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Group,Permission,UpdatedBy,DateModified"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    EntityReference:
      type: object
      required:
        - EntityName
      properties:
        Id:
          type: integer
          format: int32
        EntityName:
          type: string
          minLength: 0
          maxLength: 64
        EntityIntegerId:
          type: integer
          format: int64
        EntityStringId:
          type: string
          minLength: 0
          maxLength: 64
        ReferenceIntegerId:
          type: integer
          format: int64
        ReferenceStringId:
          type: string
          minLength: 0
          maxLength: 64
        ScopeIntegerId:
          type: integer
          format: int64
        ScopeStringId:
          type: string
          minLength: 0
          maxLength: 20
    EntityReferenceFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EntityName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                EntityIntegerId:
                  oneOf:
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
                EntityStringId:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ReferenceIntegerId:
                  oneOf:
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
                ReferenceStringId:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ScopeIntegerId:
                  oneOf:
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
                ScopeStringId:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                EntityName:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                EntityIntegerId:
                  oneOf:
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
                EntityStringId:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ReferenceIntegerId:
                  oneOf:
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
                ReferenceStringId:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
                ScopeIntegerId:
                  oneOf:
                    - type: integer
                      format: int64
                    - type: array
                      items:
                        type: integer
                        format: int64
                ScopeStringId:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                EntityName:
                  type: string
                  minLength: 0
                  maxLength: 64
                EntityIntegerId:
                EntityStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReferenceIntegerId:
                ReferenceStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ScopeIntegerId:
                ScopeStringId:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EntityName:
                  type: string
                  minLength: 0
                  maxLength: 64
                EntityIntegerId:
                  type: integer
                  format: int64
                EntityStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReferenceIntegerId:
                  type: integer
                  format: int64
                ReferenceStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ScopeIntegerId:
                  type: integer
                  format: int64
                ScopeStringId:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EntityName:
                  type: string
                  minLength: 0
                  maxLength: 64
                EntityIntegerId:
                  type: integer
                  format: int64
                EntityStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReferenceIntegerId:
                  type: integer
                  format: int64
                ReferenceStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ScopeIntegerId:
                  type: integer
                  format: int64
                ScopeStringId:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EntityName:
                  type: string
                  minLength: 0
                  maxLength: 64
                EntityIntegerId:
                  type: integer
                  format: int64
                EntityStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReferenceIntegerId:
                  type: integer
                  format: int64
                ReferenceStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ScopeIntegerId:
                  type: integer
                  format: int64
                ScopeStringId:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                EntityName:
                  type: string
                  minLength: 0
                  maxLength: 64
                EntityIntegerId:
                  type: integer
                  format: int64
                EntityStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ReferenceIntegerId:
                  type: integer
                  format: int64
                ReferenceStringId:
                  type: string
                  minLength: 0
                  maxLength: 64
                ScopeIntegerId:
                  type: integer
                  format: int64
                ScopeStringId:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "EntityName", "EntityIntegerId", "EntityStringId", "ReferenceIntegerId", "ReferenceStringId", "ScopeIntegerId", "ScopeStringId"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,EntityName,EntityIntegerId,EntityStringId,ReferenceIntegerId,ReferenceStringId,ScopeIntegerId,ScopeStringId"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    StoreConfiguration:
      type: object
      required:
        - Store
        - Property
        - Value
      properties:
        Id:
          type: integer
          format: int32
        Store:
          type: integer
          format: int32
        Property:
          type: integer
          format: int32
        Value:
          type: string
          minLength: 0
          maxLength: 64
    StoreConfigurationFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Property:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Value:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Property:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Value:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            contains:
              type: object
              properties:
                Id:
                Store:
                Property:
                Value:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
                Property:
                  type: integer
                  format: int32
                Value:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
                Property:
                  type: integer
                  format: int32
                Value:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
                Property:
                  type: integer
                  format: int32
                Value:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
                Property:
                  type: integer
                  format: int32
                Value:
                  type: string
                  minLength: 0
                  maxLength: 64
        $select:
          type: array
          example: ["Id", "Store", "Property", "Value"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Store,Property,Value"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    StoreConfigurationProperty:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 32
    StoreConfigurationPropertyFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    StoreType:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 32
    StoreTypeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 32
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 32
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ProductToStore:
      type: object
      required:
        - Product
        - Store
      properties:
        Id:
          type: integer
          format: int32
        Product:
          type: integer
          format: int32
        Store:
          type: integer
          format: int32
    ProductToStoreFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Store:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Product:
                Store:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                Store:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Product", "Store"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Product,Store"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    AttributeGroupTranslation:
      type: object
      required:
        - AttributeGroup
        - Language
        - Text
      properties:
        Id:
          type: integer
          format: int32
        AttributeGroup:
          type: integer
          format: int32
        Language:
          type: integer
          format: int32
        Text:
          type: string
          minLength: 0
          maxLength: 64
    AttributeGroupTranslationFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                AttributeGroup:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                AttributeGroup:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Text:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 64
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 64
            contains:
              type: object
              properties:
                Id:
                AttributeGroup:
                Language:
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                AttributeGroup:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                AttributeGroup:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                AttributeGroup:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                AttributeGroup:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Text:
                  type: string
                  minLength: 0
                  maxLength: 64
        $select:
          type: array
          example: ["Id", "AttributeGroup", "Language", "Text"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,AttributeGroup,Language,Text"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Category:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 255
        Status:
          type: boolean
        Image:
          type: string
          minLength: 0
          maxLength: 255
        DateAdded:
        DateModified:
    CategoryFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Status:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Status:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Image:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                DateAdded:
                  oneOf:
                DateModified:
                  oneOf:
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                DateAdded:
                DateModified:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                DateAdded:
                DateModified:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                DateAdded:
                DateModified:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                DateAdded:
                DateModified:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Status:
                Image:
                  type: string
                  minLength: 0
                  maxLength: 255
                DateAdded:
                DateModified:
        $select:
          type: array
          example: ["Id", "Name", "Status", "Image", "DateAdded", "DateModified"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Status,Image,DateAdded,DateModified"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ProductToCategory:
      type: object
      required:
        - Category
        - Product
      properties:
        Id:
          type: integer
          format: int32
        Category:
          type: integer
          format: int32
        Product:
          type: integer
          format: int32
    ProductToCategoryFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Category:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Category:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Category:
                Product:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Category", "Product"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Category,Product"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    CategoryTranslation:
      type: object
      required:
        - Category
        - Language
        - Name
        - Description
        - MetaTitle
        - MetaDescription
        - MetaKeyword
      properties:
        Id:
          type: integer
          format: int32
        Category:
          type: integer
          format: int32
        Language:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 255
        Description:
          type: string
          minLength: 0
          maxLength: 2000
        MetaTitle:
          type: string
          minLength: 0
          maxLength: 255
        MetaDescription:
          type: string
          minLength: 0
          maxLength: 255
        MetaKeyword:
          type: string
          minLength: 0
          maxLength: 255
    CategoryTranslationFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Category:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                MetaTitle:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaDescription:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaKeyword:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Category:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Language:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 2000
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 2000
                MetaTitle:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaDescription:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
                MetaKeyword:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 255
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 255
            contains:
              type: object
              properties:
                Id:
                Category:
                Language:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Category:
                  type: integer
                  format: int32
                Language:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 255
                Description:
                  type: string
                  minLength: 0
                  maxLength: 2000
                MetaTitle:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaDescription:
                  type: string
                  minLength: 0
                  maxLength: 255
                MetaKeyword:
                  type: string
                  minLength: 0
                  maxLength: 255
        $select:
          type: array
          example: ["Id", "Category", "Language", "Name", "Description", "MetaTitle", "MetaDescription", "MetaKeyword"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Category,Language,Name,Description,MetaTitle,MetaDescription,MetaKeyword"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string